// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


struct Node
{
    Node parent;
};

struct LeafNode
{

};

struct InternalNode
{
    Node childA;
    Node childB;
};


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

RWStructuredBuffer<LeafNode> leafNodes;
RWStructuredBuffer<InternalNode> internalNodes;
uint numObjects;


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);


    int2 range = determineRange(sortedMortonCodes, numObjects, id.x);
    int first = range.x;
    int last = range.y;

    // Determine where to split the range.
    int split = findSplit(sortedMortonCodes, first, last);

    // Select childA.
    Node childA;
    if (split == first)
        childA =  leafNodes[split];
    else
        childA =  internalNodes[split];

    // Select childB.
    Node childB;
    if (split + 1 == last)
        childB =  leafNodes[split + 1];
    else
        childB =  internalNodes[split + 1];

    // Record parent-child relationships.
    internalNodes[id.x].childA = childA;
    internalNodes[id.x].childB = childB;
    childA.parent =  internalNodes[id.x];
    childB.parent =  internalNodes[id.x];

}







// Expands a 10-bit integer into 30 bits
// by inserting 2 zeros after each bit.
uint expandBits(uint v)
{
    v = (v * 0x00010001u) & 0xFF0000FFu;
    v = (v * 0x00000101u) & 0x0F00F00Fu;
    v = (v * 0x00000011u) & 0xC30C30C3u;
    v = (v * 0x00000005u) & 0x49249249u;
    return v;
}

// Calculates a 30-bit Morton code for the
// given 3D point located within the unit cube [0,1].
uint morton3D(float x, float y, float z)
{
    x = min(max(x * 1024.0f, 0.0f), 1023.0f);
    y = min(max(y * 1024.0f, 0.0f), 1023.0f);
    z = min(max(z * 1024.0f, 0.0f), 1023.0f);
    uint xx = expandBits((uint)x);
    uint yy = expandBits((uint)y);
    uint zz = expandBits((uint)z);
    return xx * 4 + yy * 2 + zz;
}


int findSplit(inout int sortedMortonCodes,
            int first,
            int last)
{
    // Identical Morton codes => split the range in the middle.
    uint firstCode = sortedMortonCodes[first];
    uint lastCode = sortedMortonCodes[last];
    
    if (firstCode == lastCode)
        return (first + last) >> 1;

    // Calculate the number of highest bits that are the same
    // for all objects, using the count-leading-zeros intrinsic.
    //int commonPrefix = __clz(firstCode ^ lastCode);
    int commonPrefix = 31 - log2(firstCode ^ lastCode);
    

    // Use binary search to find where the next bit differs.
    // Specifically, we are looking for the highest object that
    // shares more than commonPrefix bits with the first one.
    int split = first; // initial guess
    int step = last - first;

    do
    {
        step = (step + 1) >> 1; // exponential decrease
        int newSplit = split + step; // proposed new position

        if (newSplit < last)
        {
            uint splitCode = sortedMortonCodes[newSplit];
            //int splitPrefix = __clz(firstCode ^ splitCode);
            int splitPrefix = 31 - log2(firstCode ^ splitCode);
            if (splitPrefix > commonPrefix)
                split = newSplit; // accept proposal
        }
    }
    while (step > 1);

    return split;
}